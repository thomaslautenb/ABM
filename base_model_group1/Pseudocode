#initial set of variables 
worry = random.gaus(0.2,1) #gaussian distribution with mu=0.2 

RE = ResponseEfficiacy 
SE = Self_efficiacy 
FD = Perceived_flood_damage 
FP = Perceived_flood-probability
GP = Government_policy

class household:
    def__ init__(self, location, worry):
        self.location = location
        self.worry = worry
        self.neighbours = [] #List of neighbour objects of clostest households(5)
        self.avg_investment_level = 0 

def update_avg_investment_level(self):
        total_investment = sum([neighbour.adapt for neighbour in self.neighbours])
        self.avg_investment_level = total_investment / len(self.neighbours) if self.neighbours else 0   

#perceived_flood_damage and perceived_flood_probability  is defined in model
def computue_Threath_appraisal(Worry, Perceived_flood_damage, Perceived_flood_probability):
    Threath_appraisal = worry + Perceived_flood_damage + Perceived_flood_probability
    return Threath_appraisal 

def compute_Coping_appraisal(Cost, Response_efficiacy , Self_efficiacy , Government_policy ):
    Coping_appraisal = (Response_efficiacy  + Self_efficiacy -Cost)*Government_policy
    return Coping_appraisal

def compute_W2P(Threath_appraisal, Coping_appraisal):
    W2P = Threath_appraisal + Coping_appraisal
    return W2P

def decide.action(self,threshold, income,age):
    if(W2P > threshold): 
        action()
    elif(W2P > threshold)
        worry = worry * random.gauss(mu=1.1)



def action(income, age):
    if (income > I): 
        if (age < A):
            flood_barrier()
        elif (age >A): 
            structural_measures()
    elif (income <I): 
        if (age < A): 
            adaptive_building_use()
        elif(age > A): 
            flood_insurance()


#actions: 
def flood_barrier(): 
    flood_damage_actual = flood_damage_actual*0.2
    self.worry  = self.worry*0.2
    self.adapt = 0.2

def structural_measure(): 
    flood_damage_actual = flood_damage_actual*0.4
    self.worry  = self.worry*0.4
    self.adapt = 0.4    

def adaptive_building_use(): 
    flood_damage_actual = flood_damage_actual*0.6
    self.worry  = self.worry*0.6
    self.adapt = 0.6

def flood_insurance(): 
    flood_damage_actual = flood_damage_actual*0.8
    self.worry  = self.worry*0.8
    self.adapt = 0.8

end class
    
class neighbours
superclass household

self.adapt 


        

